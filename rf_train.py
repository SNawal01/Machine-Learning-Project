# -*- coding: utf-8 -*-
"""RF_train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KWjJYAKZ1SkcXK6f_oCa2LuVTVqlUrNK
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files

# Upload CSV file
uploaded = files.upload()

df = pd.read_csv("final_mental_health_data.csv")

df = pd.read_csv("final_mental_health_data.csv")
df.head()  # Shows first 5 rows

from google.colab import files

# Upload CSV file
uploaded = files.upload()

df = pd.read_csv("final_mental_health_data.csv")
df.head()  # Shows first 5 rows

X = df.drop(['Severity'], axis=1)
y = df['Severity']

X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.2,       # 80% training, 20% testing
    stratify=y,          # Keep class distribution balanced
    random_state=42
)

rf_model = RandomForestClassifier(
    n_estimators=200,    # Number of trees
    max_depth=None,      # Let trees expand fully
    min_samples_split=2, # Default
    min_samples_leaf=1,  # Default
    random_state=42
)

rf_model.fit(X_train, y_train)

# Perform 5-fold cross-validation with accuracy as metric
cv_scores = cross_val_score(rf_model, X_train, y_train, cv=5, scoring='accuracy')

# Print accuracy scores from each fold
print("Cross-validation scores:", cv_scores)

# Print average accuracy across all folds
print("Average CV accuracy:", cv_scores.mean())

# Predictions
y_pred = rf_model.predict(X_test)

# Print the overall accuracy score of the model
print("Test Accuracy:", accuracy_score(y_test, y_pred))

# classification report;includes precision, recall, f1-score, and support
print("\nClassification Report:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)

# Print the confusion matrix:rows=actual classes, columns=predicted classes
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=rf_model.classes_, yticklabels=rf_model.classes_)
plt.xlabel("Predicted Classes")
plt.ylabel("Actual Classes")
plt.title("Confusion Matrix-Random Forest")
plt.show()